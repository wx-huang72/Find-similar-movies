This project is the assignment of the DSA8002 course and we are going to solve 4 tasks related to movies with either python or SQL in this assignment. 

In task 1, we import three CSV files with the help of pandas, clean the data and get everything prepared in question (a). Then we create two functions to find similar movies for the following (b) and (c) functions in python. In question (b), we will find similar movies of a given movie id which have at least one genre same and one rating identical. By putting the movie Id of a movie you're looking for similar to as a parameter into the “similar_movie” function, you will get a list that contains movies that meet the requirements with their id and title shown. Also, the id you are looking for will not be included in the result list. In question (c), we create a function called “enhancing_similar_movie”, which takes the results from the previous function and a given movieId as parameters, the criteria to select a similar movie is also augmented with the same tag. In the filtering of tags, we regard tags with the same content but different capitalization as the different tag. Furthermore, the following warning may be displayed due to the usage of “df.append(df)”. This warning does not affect the normal operation of the code and the correctness of the results. "Future warning: i:\test\Task1.py:94: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead. tag_res = tag_res.append({'movieId': row_t['movieId']}, ignore_index = True)"
 
We use SQL to solve task 2. Within this task, we will split the genres column of movies.csv and create a database of saved separated (movieId, genre) pairs to make the genre information more suitable for data processing. By taking from the first genre to the last genre of each record, and saving each separated genre with the corresponding movieId, we then get the new database named “genres”.  

To finish task 3, we use SQL for the main part and use python to turn it into a function. What we need to create is actually the same as questions 1(b) and 1(c), but the main method is SQL instead of python. After we finish the SQL queries, with the use of pandasql and string formatting, we turn SQL queries into a function in which you can put your interested movieId as a parameter and get the corresponding list of similar movies. So there are two ways to run, either use SQL queries and type in the movieId by hand or call the function in python, both ways will lead to the same results. 

The last task is about testing. We create at least one test case for each task or sub-question to check if the results are correct. 
